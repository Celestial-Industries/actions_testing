name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Deploy Application'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev-testing
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$(git rev-parse --short=8 ${{ github.sha }}) -t $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY

    - name: Build failed
      if: ${{ failure() }}
      uses: kpritam/slack-job-status-action@v1
      with:
        job-status: ${{ job.status }}
        slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel: githubactions_notifications

    - name: Build completed
      if: ${{ success() }}
      uses: kpritam/slack-job-status-action@v1
      with:
        job-status: ${{ job.status }}
        slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel: githubactions_notifications


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ca-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Set git hash env var
      id: git-hash
      run: |
        echo "::set-env name=GIT_HASH::$(git rev-parse --short=8 ${{ github.sha }})"

    - name: Setup task definition and set container image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev-testing
      id: task-def-image
      run: |
        echo 'short hash to be used in tag will be:' ${GIT_HASH}
        aws ecs describe-task-definition --task-definition simple-midge-dev --query taskDefinition > ./task-definition.json
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${GIT_HASH}"
        echo $image
        echo ${{ steps.task-def-image.outputs.image }}

    - name: Sleep for 5 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '5s'

    - name: Render AWS task
      id: render-ecs-task
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: nginx
        image: ${{ steps.task-def-image.outputs.image }}

    - name: Deploy to Amazon ECS service
      id: deploy-ecs-service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-ecs-task.outputs.task-definition }}
        service: simple-midge
        cluster: simple-midge-dev
        wait-for-service-stability: true

    - name: Deploy failed
      if: ${{ failure() }}
      uses: kpritam/slack-job-status-action@v1
      with:
        job-status: ${{ job.status }}
        slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel: githubactions_notifications

    - name: Deployed successfully
      if: ${{ success() }}
      uses: kpritam/slack-job-status-action@v1
      with:
        job-status: ${{ job.status }}
        slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel: githubactions_notifications

#  scan:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ca-central-1
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Checkout repo
#      uses: actions/checkout@v2
#
#    - name: Docker Image Static Analysis with Anchore
#      uses: anchore/scan-action@v1
#      with:
#        image-reference: "${{ env.IMAGE }}:${{ env.GIT_HASH }}-${{ env.ENV }}"
#        dockerfile-path: "${{ env.DOCKERFILE }}"
#        fail-build: false
#        include-app-packages: true
#        #custom-policy-path: frontend/anchore_policy.json
#        debug: false

## need to check sytax below
#  scan:
#    runs-on: ubuntu-latest
#  notification2:
#    runs-on: ubuntu-latest
#    steps:
#      - name: message1
#        id: message1
#        #if: ${{ failure() }}
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
#        env:
##          GITHUB_TOKEN: ${{ github.token }} # optional
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required

#  notification3:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Message2
#        id: message2
#        uses: rtCamp/action-slack-notify@master
#        env:
#          SLACK_CHANNEL: githubactions_notifications
#          SLACK_COLOR: '#3278BD'
#          SLACK_ICON: https://github.com/rtCamp.png?size=48
#          SLACK_MESSAGE: 'Post Content :rocket: ${{ github.event.inputs.name }}'
#          SLACK_TITLE: Notification
#          SLACK_USERNAME: something
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}